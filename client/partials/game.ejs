<head>
  <!-- Vuetify Documentation -->
  <link
    href="https://fonts.googleapis.com/css?family=Roboto:100,300,400,500,700,900"
    rel="stylesheet"
  />
  <link
    href="https://cdn.jsdelivr.net/npm/@mdi/font@4.x/css/materialdesignicons.min.css"
    rel="stylesheet"
  />
  <link
    href="https://cdn.jsdelivr.net/npm/vuetify@2.x/dist/vuetify.min.css"
    rel="stylesheet"
  />

  <!-- CDNJS Vuetify Links -->
  <link
    rel="stylesheet"
    href="https://cdnjs.cloudflare.com/ajax/libs/vuetify/2.1.12/vuetify.css"
    integrity="sha256-eWzVOWu5XL0CR2w08ovD5qMN3UXliNf9e82W+eZwQ+E="
    crossorigin="anonymous"
  />
  <link
    rel="stylesheet"
    href="https://cdnjs.cloudflare.com/ajax/libs/vuetify/2.1.12/vuetify.min.css"
    integrity="sha256-QAvBxOUdSj+MaIojNHfbf9a3HhORmrLlgFqgMiKMEb0="
    crossorigin="anonymous"
  />

  <meta
    name="viewport"
    content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no, minimal-ui"
  />
</head>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>

<!-- Vuetify Documentation -->
<script src="https://cdn.jsdelivr.net/npm/vue@2.x/dist/vue.js"></script>
<script src="https://cdn.jsdelivr.net/npm/vuetify@2.x/dist/vuetify.js"></script>

<!-- CDNJs Vue -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/vue/2.6.10/vue.js"></script>

<!-- CDNJS Vuetify-->
<script
  src="https://cdnjs.cloudflare.com/ajax/libs/vuetify/2.1.12/vuetify.js"
  integrity="sha256-vpGloYTtFYxXd3onBTpMrhcqlz2E9iKL2NB7XfmEluw="
  crossorigin="anonymous"
></script>
<script
  src="https://cdnjs.cloudflare.com/ajax/libs/vuetify/2.1.12/vuetify.min.js"
  integrity="sha256-0SQFpYrI866B5xJRmXyNLL7GfCH6P6mzqioDhfKky3U="
  crossorigin="anonymous"
></script>

<audio id="bomb">
  <source
    src="https://freesound.org/data/previews/33/33245_65091-lq.mp3"
    type="audio/mpeg"
  />
</audio>

<audio id="water">
  <source
    src="https://freesound.org/data/previews/420/420227_8375530-lq.mp3"
    type="audio/mpeg"
  />
</audio>

<div id="app2">
  <v-app>
    <v-content class="apps">
      <template>
        <div class="container">
          <div class="col-md-12">
            <!-- Game -->
            <div id="game">
              <div class="row">
                <div class="col-md-12">
                  <!-- Panel -->
                  <div class="panel panel-primary">
                    <!-- Header -->
                    <div class="panel-heading">
                      Battleship Game #<span id="game-number"></span>
                      <v-btn id="leaveGame">Leave Game</v-btn>
                    </div>
                    <!-- -->

                    <div class="panel-body">
                      <!-- Player Grids -->
                      <div class="row">
                        <!-- Our Grid -->
                        <div class="col-md-6 player-grid text-center">
                          <h3>You <strong id="turnsMe"></strong></h3>
                          <table-board
                            class="tableboardcss"
                            ref="tableBoard"
                          ></table-board>
                        </div>
                        <!--  -->

                        <!-- Opponent Grid  -->
                        <div class="col-md-6 player-grid text-center">
                          <h3>Opponent <strong id="turnsTm"></strong></h3>
                          <table-board2
                            class="tableboardcss"
                            ref="fleeBoard"
                            @receivedata="receivedata"
                          ></table-board2>
                        </div>
                        <!--  -->
                      </div>
                      <!--  -->
                    </div>

                    <!-- Chat -->
                    <ul class="list-group">
                      <!-- Status -->
                      <li
                        class="list-group-item text-center"
                        id="turn-status"
                      ></li>
                      <!--  -->

                      <!-- Chat messages -->
                      <li class="list-group-item" id="messages-list">
                        <ul id="messages"></ul>
                      </li>
                      <!--  -->

                      <!-- Send chat message form -->
                      <li class="list-group-item">
                        <form id="message-form" action="">
                          <div class="input-group">
                            <input
                              id="message"
                              class="form-control"
                              autocomplete="off"
                            />
                            <div class="input-group-btn">
                              <button class="btn btn-primary">
                                Send Message
                              </button>
                            </div>
                          </div>
                        </form>
                      </li>
                      <!--  -->
                    </ul>
                    <!--  -->
                  </div>
                  <!--  -->
                </div>
              </div>
            </div>
            <!--  -->
          </div>
        </div>
      </template>
    </v-content>
  </v-app>
</div>

<script>
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  // Component - TableBoard                                                                                      //
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  Vue.component("TableBoard", {
    props: {},

    template: ` <div>
                    <table class="table">
                      <thead>
                        <tr>
                          <td v-for="i in 11">{{i-1}}</td>
                        </tr>
                      </thead>
                      <tbody>
                          <tr v-for="(y,index1) in tableUs" >
                            <td class="h">{{index1+1}}</td>
                            <td v-for="(x,index) in y" v-bind:id="'me'+ index1 + '' + index" :class="status(x)" ></td>
                          </tr>
                      </tbody>
                    </table>
                  </div>`,

    data() {
      return {
        tableUs: []
      };
    },

    methods: {
      status(field) {
        return field != -1 ? "is-dark" : "c";
      },
      update(ola) {
        this.tableUs = ola;
      }
    }

    // Mounted/Created Functions Of This Component
  });
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  // FIM DO COMPONENTE                                                                                           //
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  Vue.component("TableBoard2", {
    props: {
      code: { type: Number, default: null }
    },

    template: ` <div>
                    <table class="table">
                      <thead>
                        <tr>
                          <td v-for="i in 11">{{i-1}}</td>
                        </tr>
                      </thead>

                      <tbody>

                        <tr v-for="(y,index1) in tableTh" >
                          <td class="h">{{index1+1}}</td>
                          <td v-for="(x,index) in y"  v-bind:id="'tm'+ index1 + '' + index" :class="status(x)" @click="select({y: index1,x: index})""></td>
                        </tr>

                    </tbody>

                    </table>
                  </div>`,

    data() {
      return {
        tableTh: []
      };
    },

    methods: {
      status(field) {
        return "b";
      },

      update(ola2) {
        this.tableTh = ola2;
      },

      select(args) {
        this.$emit("receivedata", args);
        //alert(args.y + " " + args.x);
      }
    }
  });
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  // Inst√¢ncia da VUE APP                                                                                        //
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  var app = new Vue({
    el: "#app2",

    vuetify: new Vuetify(),

    data() {
      return {
        code: null
      };
    },

    methods: {
      receivedata(data) {
        sendShotss(data);
      },

      remake(data) {
        this.$refs.tableBoard.update(data.grid.ships);
        this.$refs.fleeBoard.update(data.grid.shots);
      }
    }

    // Mounted/Created Functions
  });
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  // FIM DO COMPONENTE                                                                                           //
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  // METHODS EXTERNOS AO VUE                                                                                     //
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  function dataToVue(gameState) {
    console.log(gameState);
    if (gameState.turn == true) {
      $("#turnsMe").html("- Your turn");
    } else {
      $("#turnsTm").html("- Opponent turn");
    }
    app.remake(gameState);
  }

  function sendShotss(data) {
    console.log(data);
    socket.emit("shot", data);
  }

  function changeTh(data) {
    var x = data.pos.y + "" + data.pos.x;
    console.log(x);
    if (data.success == true) {
      $("#tm" + x).addClass("d");
      $("#turnsMe").html("- Your turn");
      Bomb();
    } else {
      $("#tm" + x).addClass("e");
      $("#turnsMe").empty();
      $("#turnsTm").html("- Opponent turn");
      Water();
    }
  }
  function changeMe(data) {
    var x = data.pos.y + "" + data.pos.x;
    console.log(x);
    if (data.success == true) {
      $("#me" + x).addClass("d");
      $("#turnsTm").html("- Opponent turn");
      Bomb();
    } else {
      $("#me" + x).addClass("e");
      $("#turnsTm").empty();
      $("#turnsMe").html("- Your turn");
      Water();
    }
  }
  function Water() {
    var x = document.getElementById("water");
    x.play();
  }
  function Bomb() {
    var y = document.getElementById("bomb");
    y.play();
  }

  $("#leaveGame").click(function() {
    location.reload();
  });
</script>

<style>
  .panel-body {
    padding-top: 0px;
  }
  .apps {
    background-image: url(https://i.imgur.com/yVelP37.jpg);
    background-attachment: fixed;
    background-size: cover;
    background-position: center;
    background-repeat: no-repeat;
  }
  /*TableBoard*/

  .tablediv {
    height: 67.5vh;
    width: 65vh;
    display: block;
  }

  .tableboardcss .is-dark {
    border: 1px solid black;
    background: grey;
  }

  .table,
  .is-bordered,
  .is-fullwidth {
    font-family: "Trebuchet MS", Arial, Helvetica, sans-serif;
    border: 1px solid black;
    height: 67.5vh;
    width: 65vh;
  }

  .table > thead > tr > td {
    border: 1px solid black;
    background: black;
    color: white;
    text-align: center;
    vertical-align: middle;
    height: 5vh;
    width: 5vh;
  }

  .table > tbody > tr > td.h {
    border: 1px solid black;
    background: black;
    color: white;
    text-align: center;
    vertical-align: middle;
    height: 5vh;
    width: 5vh;
  }

  .table > tbody > tr > td.b {
    border: 1px solid black;

    height: 5vh;
    width: 5vh;
  }

  .table > tbody > tr > td.b:hover {
    background: burlywood;
  }

  .table > tbody > tr > td.c {
    border: 1px solid black;

    height: 5vh;
    width: 5vh;
  }

  .table > tbody > tr > td.d {
    background-color: red;
  }
  .table > tbody > tr > td.e {
    background-color: blue;
  }
  #leaveGame {
    margin-left: 2%;
  }
</style>
